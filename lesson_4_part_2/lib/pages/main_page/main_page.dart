import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:weather_app/domains/weather_model/weather_model.dart';
import 'package:weather_app/pages/main_page/widgets/model_day_weather_widget.dart';
import 'package:weather_app/util/images/images_data.dart';

import '../../domains/api_clients/api_client.dart';
import '../../domains/weather_model/weather_data_model.dart';
import '../../util/text_styles/text_styles.dart';

Autogenerated? _weather;
bool getWeather = false;

class MainPage extends StatefulWidget {
  const MainPage({Key? key}) : super(key: key);

  @override
  State<MainPage> createState() => _MainPageState();
}

class _MainPageState extends State<MainPage> {
  List<String> items = ['Days', 'by the hour'];
  String? selectedItem;

  @override
  Widget build(BuildContext context) {
    var screenWidth = (MediaQuery.of(context).size.width);
    final apiClient = ApiClient();
    void reloadPost() async {
      var weather = await apiClient.getWeather();
      setState(() => _weather = weather);
    }

    if (!getWeather) {
      reloadPost();
      getWeather = true;
    }

    if (_weather != null) {
      return Scaffold(
        body: DecoratedBox(
          decoration: const BoxDecoration(
            image: DecorationImage(
                image: BackgroundImage.backgroundMorningImage,
                fit: BoxFit.cover),
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const Padding(
                padding: EdgeInsets.all(16.0),
                child: TextField(
                    style: TextStyles.cityFindTextStyle,
                    decoration: InputDecoration(
                        hintStyle: TextStyle(color: Colors.white70),
                        hintText: 'city',
                        enabledBorder: UnderlineInputBorder(
                            borderSide:
                                BorderSide(width: 2.0, color: Colors.white)),
                        focusedBorder: UnderlineInputBorder(
                            borderSide:
                                BorderSide(width: 1.0, color: Colors.white60)),
                        isCollapsed: true,
                        contentPadding: EdgeInsets.only(top: 16.0),
                        prefixIcon: Icon(
                          Icons.location_city,
                          color: Colors.white60,
                        ))),
              ),
              const Text("Kropyvnytskyi",
                  style: TextStyle(
                      color: Colors.white70,
                      fontSize: 35,
                      fontWeight: FontWeight.w300)),
              Text(' ${(_weather?.list![0].main?.temp?.toInt()).toString()}Â°',
                  style: const TextStyle(
                      color: Colors.white70,
                      fontSize: 70,
                      fontWeight: FontWeight.w300)),
              Text((_weather?.list![0].weather![0].description).toString(),
                  style: const TextStyle(
                      color: Colors.white70,
                      fontSize: 20,
                      fontWeight: FontWeight.w300)),
              const SizedBox(height: 250),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 8.0),
                child: Container(
                  child: Align(
                    alignment: Alignment.centerRight,
                    child: DropdownButtonFormField<String>(
                     dropdownColor: Colors.black54,
                        iconEnabledColor: Colors.white,
                        iconDisabledColor: Colors.white,
                        value: selectedItem,
                        hint: Text("Days / by the hour",style: TextStyle(
                            fontSize: 17, color: Colors.white)),
                        items: items
                            .map((item) => DropdownMenuItem<String>(
                                  value: item,
                                  child: Text(item,
                                      style: TextStyle(
                                          fontSize: 17, color: Colors.white)),
                                ))
                            .toList(),
                        onChanged: (item) => setState(() => selectedItem = item)),
                  ),
                ),
              ),
              Expanded(
                child: Container(
                  decoration: const BoxDecoration(
                    border: Border(
                      top: BorderSide(width: 2.5, color: Colors.white),
                    ),
                    color: Colors.black54,
                  ),
                  width: screenWidth,
                  child: Center(
                    child: ListView.builder(
                        shrinkWrap: true,
                        scrollDirection: Axis.horizontal,
                        itemCount: 5,
                        itemBuilder: (context, index) {
                          return index == 0
                              ? ModelWeatherDayWidget(
                                  weather: _weather!, index: (index))
                              : ModelWeatherDayWidget(
                                  weather: _weather!, index: (index) * 8);
                        }),
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    } else {
      return const Scaffold(body: Center(child: Text('Wait weather data')));
    }
  }

  setTemperatureFromFahrenheitToCelsius(double? temp) {
    double celsius = temp!;
    return (celsius - 32) * 5 ~/ 9;
  }
}
